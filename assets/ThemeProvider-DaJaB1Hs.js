import{j as d}from"./jsx-runtime-SKoiH9zj.js";import{r as n}from"./index-DJO9vBfz.js";const i="component-library-theme";function h(){return typeof window>"u"?"light":window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function l(e){try{localStorage.setItem(i,e)}catch(t){console.warn("Failed to save theme preference:",t)}}function s(){try{const e=localStorage.getItem(i);return e&&(e==="light"||e==="dark")?e:null}catch(e){return console.warn("Failed to load theme preference:",e),null}}function u(e){document.documentElement.setAttribute("data-theme",e);const t=document.querySelector('meta[name="theme-color"]');t&&t.setAttribute("content",e==="dark"?"#000000":"#ffffff")}function f(e){const t=window.matchMedia("(prefers-color-scheme: dark)"),r=o=>{e(o.matches?"dark":"light")};return t.addEventListener("change",r),()=>t.removeEventListener("change",r)}const c=n.createContext(void 0);function p({children:e,defaultTheme:t="light"}){const[r,o]=n.useState(()=>{const a=s();return a||h()||t});n.useEffect(()=>{u(r),l(r)},[r]),n.useEffect(()=>f(a=>{s()||o(a)}),[]);const m={theme:r,setTheme:o};return d.jsx(c.Provider,{value:m,children:e})}function v(){const e=n.useContext(c);if(e===void 0)throw new Error("useTheme must be used within a ThemeProvider");return e}p.__docgenInfo={description:`ThemeProvider component that manages theme state and provides theme context
to all child components. It handles system theme preference detection,
theme persistence, and theme switching.`,methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"",defaultValue:{value:"'light'",computed:!1}}}};export{p as T,v as u};
